name: Build, Test, Coverage and Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Compilar (sem testes)
        run: mvn clean compile -DskipTests

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Rodar Testes (profile test)
        run: mvn test -Dspring.profiles.active=test

      - name: Publicar Relatório de Testes (Surefire)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Rodar cobertura com JaCoCo
        run: mvn verify -Dspring.profiles.active=test

      - name: Publicar Relatório de Cobertura (JaCoCo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Validar Cobertura mínima (80%)
        run: |
          MISSED=$(grep -oPm1 "(?<=missed=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          COVERED=$(grep -oPm1 "(?<=covered=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          TOTAL=$((COVERED + MISSED))
          PERCENT=$(( 100 * COVERED / TOTAL ))
          echo "Cobertura: $PERCENT%"
          if [ "$PERCENT" -lt 80 ]; then
            echo "Cobertura abaixo de 80%, falhando pipeline!"
            exit 1
          fi

  sonar:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: SonarQube (fake)
        run: echo "Aqui entraria a análise do SonarQube/CodeQL..."

  docker:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Logar no DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da Imagem (profile docker)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/game-catalog-api:latest
          build-args: |
            SPRING_PROFILES_ACTIVE=docker
