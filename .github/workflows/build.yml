name: Build, Test, Coverage, Docker and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Compilar (sem testes)
        run: mvn clean compile -DskipTests

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Rodar Testes (profile test)
        run: mvn test -Dspring.profiles.active=test

      - name: Publicar Relat√≥rio de Testes (Surefire)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Rodar cobertura com JaCoCo
        run: mvn verify -Dspring.profiles.active=test

      - name: Publicar Relat√≥rio de Cobertura (JaCoCo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Validar Cobertura m√≠nima (80%)
        run: |
          MISSED=$(grep -oPm1 "(?<=missed=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          COVERED=$(grep -oPm1 "(?<=covered=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          TOTAL=$((COVERED + MISSED))
          PERCENT=$(( 100 * COVERED / TOTAL ))
          echo "Cobertura: $PERCENT%"
          if [ "$PERCENT" -lt 80 ]; then
            echo "Cobertura abaixo de 80%, falhando pipeline!"
            exit 1
          fi

  sonar:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: SonarQube (fake)
        run: echo "Aqui entraria a an√°lise do SonarQube/CodeQL..."

  docker:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Gerar JAR (profile docker)
        run: mvn clean package -DskipTests -Dspring.profiles.active=docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build e Push da Imagem para ECR
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/game-catalog-api:latest
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "‚úÖ Imagem enviada para o ECR: $IMAGE_URI"

  aws:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: For√ßar novo deploy no ECS
        run: |
          aws ecs update-service \
            --cluster games-cluster-01 \
            --service game-catalog-api-service \
            --force-new-deployment
          echo "üì¶ Novo deploy disparado no ECS"

  deploy:
    runs-on: ubuntu-latest
    needs: aws
    steps:
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validar se ECS est√° est√°vel
        run: |
          aws ecs wait services-stable \
            --cluster games-cluster-01 \
            --services game-catalog-api-service
          echo "‚úÖ ECS Service est√° est√°vel e rodando!"

      - name: Mensagem final
        run: echo "üöÄ Deploy conclu√≠do com sucesso no ECS! Tudo certo"
