name: (Dev e Hml)Build, Test, Coverage, Docker and Deploy

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    name: üî® Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Obter vers√£o do POM
        id: get_version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Compilar (sem testes)
        run: mvn clean compile -DskipTests

  test:
    name: ‚úÖ Testes
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3
      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Rodar Testes (profile test)
        run: mvn test -Dspring.profiles.active=test
      - name: Publicar Relat√≥rio de Testes (Surefire)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

  coverage:
    name: üìä Cobertura
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3
      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Rodar cobertura com JaCoCo
        run: mvn verify -Dspring.profiles.active=test
      - name: Publicar Relat√≥rio de Cobertura (JaCoCo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/
      - name: Validar Cobertura m√≠nima (80%)
        run: |
          MISSED=$(grep -oPm1 "(?<=missed=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          COVERED=$(grep -oPm1 "(?<=covered=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          TOTAL=$((COVERED + MISSED))
          PERCENT=$(( 100 * COVERED / TOTAL ))
          echo "Cobertura: $PERCENT%"
          if [ "$PERCENT" -lt 80 ]; then
            echo "Cobertura abaixo de 80%, falhando pipeline!"
            exit 1
          fi

  sonar:
    name: üîç An√°lise de C√≥digo
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3
      - name: SonarQube (fake)
        run: echo "Aqui entraria a an√°lise do SonarQube/CodeQL..."

  docker-dev-hml:
    name: üê≥ Publicar Imagem DEV e HML
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Gerar JAR (profile docker)
        run: mvn clean package -DskipTests -Dspring.profiles.active=docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push das Imagens DEV e HML
        run: |
          IMAGE_BASE=${{ secrets.DOCKERHUB_USERNAME }}/game-catalog-api
          VERSION=${{ needs.build.outputs.version }}

          # Build da imagem com tag DEV
          DEV_TAG=$VERSION-dev
          docker build -t $IMAGE_BASE:$DEV_TAG .
          docker push $IMAGE_BASE:$DEV_TAG
          echo "‚úÖ Imagem DEV publicada: $IMAGE_BASE:$DEV_TAG"

          # Retag para HML e push tamb√©m
          HML_TAG=$VERSION-hml
          docker tag $IMAGE_BASE:$DEV_TAG $IMAGE_BASE:$HML_TAG
          docker push $IMAGE_BASE:$HML_TAG
          echo "üöÄ Imagem HML publicada: $IMAGE_BASE:$HML_TAG"
