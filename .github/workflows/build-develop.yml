name: (Dev e Hml)Build, Test, Coverage, Docker and Deploy

on:
  push:
    branches:
      - develop
  workflow_dispatch:   # habilita o botão "Run workflow" (pra HML manual)

jobs:
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Compilar (sem testes)
        run: mvn clean compile -DskipTests

  test:
    name: ✅ Testes
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Rodar Testes (profile test)
        run: mvn test -Dspring.profiles.active=test

      - name: Publicar Relatório de Testes (Surefire)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

  coverage:
    name: 📊 Cobertura
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Rodar cobertura com JaCoCo
        run: mvn verify -Dspring.profiles.active=test

      - name: Publicar Relatório de Cobertura (JaCoCo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Validar Cobertura mínima (80%)
        run: |
          MISSED=$(grep -oPm1 "(?<=missed=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          COVERED=$(grep -oPm1 "(?<=covered=\")[0-9]+" target/site/jacoco/jacoco.xml | paste -sd+ - | bc)
          TOTAL=$((COVERED + MISSED))
          PERCENT=$(( 100 * COVERED / TOTAL ))
          echo "Cobertura: $PERCENT%"
          if [ "$PERCENT" -lt 80 ]; then
            echo "Cobertura abaixo de 80%, falhando pipeline!"
            exit 1

  sonar:
    name: 🔍 Análise de Código
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: SonarQube (fake)
        run: echo "Aqui entraria a análise do SonarQube/CodeQL..."

  docker-dev:
    name: 🐳 Publicar Imagem DEV
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Gerar JAR (profile docker)
        run: mvn clean package -DskipTests -Dspring.profiles.active=docker

      - name: Obter versão do POM
        id: project_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da Imagem DEV
        run: |
          IMAGE_BASE=${{ secrets.DOCKERHUB_USERNAME }}/game-catalog-api
          TAG=${VERSION}-dev
          docker build -t $IMAGE_BASE:$TAG .
          docker push $IMAGE_BASE:$TAG
          echo "✅ Imagem DEV publicada: $IMAGE_BASE:$TAG"

  deploy-hml:
    name: 🚀 Publicar Imagem HML
    runs-on: ubuntu-latest
    needs: docker-dev
    if: github.event_name == 'workflow_dispatch'   # só roda no "play"
    steps:
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Retag e Push da Imagem para HML
        run: |
          IMAGE_BASE=${{ secrets.DOCKERHUB_USERNAME }}/game-catalog-api
          HML_TAG=${VERSION}-hml

          docker pull $IMAGE_BASE:${VERSION}-dev
          docker tag $IMAGE_BASE:${VERSION}-dev $IMAGE_BASE:$HML_TAG
          docker push $IMAGE_BASE:$HML_TAG

          echo "🚀 Imagem HML publicada: $IMAGE_BASE:$HML_TAG"
